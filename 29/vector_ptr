// Copyright (C) 2024-2200 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file include/vector_ptr
 *  This is a TS C++ Library header.
*/

#ifndef _GLIBCXX_VECTOR_PTR
#define _GLIBCXX_VECTOR_PTR 1

#pragma GCC system_header

#include <vector>
#include <memory>

#include <bits/c++config.h>

namespace std _GLIBCXX_VISIBILITY(default) 
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

    class vector_ptr {
    private:
        std::vector<void*> _data;

    public:
        template <typename T>
        void push_back(T* ptr) {
            _data.push_back(static_cast<void*>(ptr));
        }

        template <typename T>
        void push_back(const std::unique_ptr<T>& ptr) {
            _data.push_back(static_cast<void*>(ptr.get()));
        }

        template <typename T>
        void push_back(const std::shared_ptr<T>& ptr) {
            _data.push_back(static_cast<void*>(ptr.get()));
        }

        template <typename T>
        void push_back(const std::weak_ptr<T>& ptr) {
            if (auto shared = ptr.lock()) {
                _data.push_back(static_cast<void*>(shared.get()));
            } else {
                _data.push_back(nullptr);
            }
        }

        template <std::size_t _Index, typename T>
        T* get() {
            if (_Index >= _data.size()) {
                throw std::out_of_range("Index out of bounds");
            }

            return static_cast<T*>(_data[_Index]);
        }

        ~vector_ptr() {
            for (auto ptr : _data) {
                delete static_cast<int*>(ptr);
            }
        }
    };

    namespace __cxx29 {
        using vector_ptr = ::std::vector_ptr;
    };

_GLIBCXX_END_NAMESPACE_VERSION
} // namespace

#endif /* _GLIBCXX_VECTOR_PTR */
