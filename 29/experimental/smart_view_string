// Copyright (C) 2024-2200 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file experimental/smart_view_string
 *  This is a TS C++ Library header.
*/

#ifndef _GLIBCXX_EXPERIMENTAL_SMART_VIEW_STRING
#define _GLIBCXX_EXPERIMENTAL_SMART_VIEW_STRING 1

#pragma GCC system_header

#include <iostream>
#include <vector>

#include <bits/c++config.h>

namespace smart_view_string _GLIBCXX_VISIBILITY(default) 
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

    inline bool startsWith(const std::string &str, const std::string &prefix) {
        return str.compare(0, prefix.length(), prefix) == 0;
    }

    inline bool endsWith(const std::string &str, const std::string &suffix) {
        return str.size() >= suffix.size() && str.compare(str.size() - suffix.size(), suffix.size(), suffix) == 0;
    }

    inline std::vector<std::string> split(const std::string &str, char delimiter) {
        std::vector<std::string> tokens;
        std::string token;

        for (char ch : str) {
            if (ch == delimiter) {
                if (!token.empty()) {
                    tokens.push_back(token);
                    token.clear();
                }
                
            } else {
                token += ch;
            }
        }

        if (!token.empty()) {
            tokens.push_back(token);
        }

        return tokens;
    }

_GLIBCXX_END_NAMESPACE_VERSION
} // namespace

#endif /* _GLIBCXX_EXPERIMENTAL_SMART_VIEW_STRING */
