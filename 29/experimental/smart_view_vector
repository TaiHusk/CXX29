// Copyright (C) 2024-2200 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file experimental/smart_view_vector
 *  This is a TS C++ Library header.
*/

#ifndef _GLIBCXX_EXPERIMENTAL_SMART_VIEW_VECTOR
#define _GLIBCXX_EXPERIMENTAL_SMART_VIEW_VECTOR 1

#pragma GCC system_header

#include <iostream>
#include <sstream>
#include <functional>
#include <vector>
#include <optional>

#include <bits/c++config.h>

namespace smart_view_vector _GLIBCXX_VISIBILITY(default) 
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

    template <typename T>
    static bool includes(const std::vector<T>& vec, const T& value) {
        for (auto &&item : vec) {
            if ((bool*)(item == value)) return true;
        }

        return false;
    }

    template <typename T>
    static bool includes(const std::vector<T>& vec, const std::function<bool(const T&)>& callback) {
        for (const T& item : vec) {
            if (callback(item)) return true;
        }

        return false;
    }

    template<typename T>
    static bool every(const std::vector<T>& vec, const T& value) {
        std::vector<bool> bools;

        for (auto &&item : vec) {
            if ((bool*)(item == value)) bools.push_back(true);
        }

        return vec.size() == bools.size();
    }

    template<typename T>
    static bool every(const std::vector<T>& vec, const std::function<bool(const T&)>& callback) {
        std::vector<bool> bools;

        for (auto &&item : vec) {
            if (callback(item)) bools.push_back(true);
        }

        return vec.size() == bools.size();
    }

    template<typename T>
    static std::optional<T> find(const std::vector<T>& vec, const std::function<bool(const T&)>& callback) {
        size_t count = vec.size();

        for (size_t i = 0; i < count; i++)
        {
            T item = vec[i];
            if (callback(item)) return item;
        }
        
        return std::nullopt;
    }

    template<typename T>
    static size_t findIndex(const std::vector<T>& vec, const std::function<bool(const T&)>& callback) {
        size_t count = vec.size();

        for (size_t i = 0; i < count; i++)
        {
            T item = vec[i];
            if (callback(item)) return i;
        }
        
        return -1;
    }

    template<typename T> 
    static void each(const std::vector<T>& vec, std::function<void(const T&, const size_t&, const std::vector<T>&)> callback) {
        size_t count = vec.size();

        for (size_t i = 0; i < count; i++) {
            callback(vec[i], i, vec);
        }
    }

    template<typename T>
    static std::string to_string(const std::vector<T>& vec) {
        std::stringstream stringstream;
        stringstream << "{";

        for (size_t i = 0; i < vec.size(); ++i) {
            stringstream << vec[i];

            if (i != vec.size() - 1) {
                stringstream << ", ";
            }
        }

        stringstream << "}";
        return stringstream.str();
    }

    template <typename T>
    static void print(const std::vector<T>& vec) {
        std::cout << "{";
        for (auto &&item : vec) std::cout << item << ", ";
        std::cout << "}\n";
    }

_GLIBCXX_END_NAMESPACE_VERSION
} // namespace

#endif /* _GLIBCXX_EXPERIMENTAL_SMART_VIEW_VECTOR */
