// Copyright (C) 2024-2200 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file include/reflect
 *  This is a TS C++ Library header.
*/

#ifndef _GLIBCXX_REFLECT
#define _GLIBCXX_REFLECT 1

#pragma GCC system_header

#include <memory>

#include <bits/c++config.h>

namespace std _GLIBCXX_VISIBILITY(default) 
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

    class reflect {
    public:
        template<class T, class _Abstract>
        inline static const T* construct(_Abstract* _class) {
            return dynamic_cast<const T*>(_class);
        };

        template<class T, class _Abstract>
        inline static const T* construct(const _Abstract& _class) {
            return dynamic_cast<const T*>(&_class);
        };

        template<class T, class _Abstract>
        inline static const T* construct(const class std::unique_ptr<_Abstract>& _class) {
            return dynamic_cast<const T*>(_class.get());
        };

        template<typename TargetType, typename BaseType>
        static constexpr TargetType* ownership(BaseType* base) noexcept {
            if constexpr (std::is_const_v<BaseType>) {
                return dynamic_cast<const TargetType*>(base);
            } else {
                return dynamic_cast<TargetType*>(base);
            }
        };

        template<typename TargetType, typename BaseType>
        static constexpr const TargetType* ownership(const BaseType* base) noexcept {
            return dynamic_cast<const TargetType*>(base);
        };

        template<typename TargetType, typename BaseType>
        static constexpr TargetType* ownership(std::unique_ptr<BaseType>& base) noexcept {
            if constexpr (std::is_const_v<BaseType>) {
                return dynamic_cast<const TargetType*>(base.get());
            } else {
                return dynamic_cast<TargetType*>(base.get());
            }
        };

        template<typename TargetType, typename BaseType>
        static constexpr const TargetType* ownership(const std::unique_ptr<BaseType>& base) noexcept {
            return dynamic_cast<const TargetType*>(base.get());
        };
    };

    namespace __cxx29 {
        using reflect = ::std::reflect;
    };

_GLIBCXX_END_NAMESPACE_VERSION
} // namespace

#endif /* _GLIBCXX_REFLECT */
